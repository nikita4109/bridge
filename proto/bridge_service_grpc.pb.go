// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/bridge_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BridgeServiceClient is the client API for BridgeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BridgeServiceClient interface {
	SendBridge(ctx context.Context, in *SendBridgeRequest, opts ...grpc.CallOption) (*SendBridgeResponse, error)
	GetBridgeStatus(ctx context.Context, in *GetBridgeStatusRequest, opts ...grpc.CallOption) (BridgeService_GetBridgeStatusClient, error)
}

type bridgeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBridgeServiceClient(cc grpc.ClientConnInterface) BridgeServiceClient {
	return &bridgeServiceClient{cc}
}

func (c *bridgeServiceClient) SendBridge(ctx context.Context, in *SendBridgeRequest, opts ...grpc.CallOption) (*SendBridgeResponse, error) {
	out := new(SendBridgeResponse)
	err := c.cc.Invoke(ctx, "/bridge.BridgeService/SendBridge", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bridgeServiceClient) GetBridgeStatus(ctx context.Context, in *GetBridgeStatusRequest, opts ...grpc.CallOption) (BridgeService_GetBridgeStatusClient, error) {
	stream, err := c.cc.NewStream(ctx, &BridgeService_ServiceDesc.Streams[0], "/bridge.BridgeService/GetBridgeStatus", opts...)
	if err != nil {
		return nil, err
	}
	x := &bridgeServiceGetBridgeStatusClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BridgeService_GetBridgeStatusClient interface {
	Recv() (*BridgeStatusUpdate, error)
	grpc.ClientStream
}

type bridgeServiceGetBridgeStatusClient struct {
	grpc.ClientStream
}

func (x *bridgeServiceGetBridgeStatusClient) Recv() (*BridgeStatusUpdate, error) {
	m := new(BridgeStatusUpdate)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BridgeServiceServer is the server API for BridgeService service.
// All implementations must embed UnimplementedBridgeServiceServer
// for forward compatibility
type BridgeServiceServer interface {
	SendBridge(context.Context, *SendBridgeRequest) (*SendBridgeResponse, error)
	GetBridgeStatus(*GetBridgeStatusRequest, BridgeService_GetBridgeStatusServer) error
	mustEmbedUnimplementedBridgeServiceServer()
}

// UnimplementedBridgeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBridgeServiceServer struct {
}

func (UnimplementedBridgeServiceServer) SendBridge(context.Context, *SendBridgeRequest) (*SendBridgeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBridge not implemented")
}
func (UnimplementedBridgeServiceServer) GetBridgeStatus(*GetBridgeStatusRequest, BridgeService_GetBridgeStatusServer) error {
	return status.Errorf(codes.Unimplemented, "method GetBridgeStatus not implemented")
}
func (UnimplementedBridgeServiceServer) mustEmbedUnimplementedBridgeServiceServer() {}

// UnsafeBridgeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BridgeServiceServer will
// result in compilation errors.
type UnsafeBridgeServiceServer interface {
	mustEmbedUnimplementedBridgeServiceServer()
}

func RegisterBridgeServiceServer(s grpc.ServiceRegistrar, srv BridgeServiceServer) {
	s.RegisterService(&BridgeService_ServiceDesc, srv)
}

func _BridgeService_SendBridge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendBridgeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BridgeServiceServer).SendBridge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bridge.BridgeService/SendBridge",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BridgeServiceServer).SendBridge(ctx, req.(*SendBridgeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BridgeService_GetBridgeStatus_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetBridgeStatusRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BridgeServiceServer).GetBridgeStatus(m, &bridgeServiceGetBridgeStatusServer{stream})
}

type BridgeService_GetBridgeStatusServer interface {
	Send(*BridgeStatusUpdate) error
	grpc.ServerStream
}

type bridgeServiceGetBridgeStatusServer struct {
	grpc.ServerStream
}

func (x *bridgeServiceGetBridgeStatusServer) Send(m *BridgeStatusUpdate) error {
	return x.ServerStream.SendMsg(m)
}

// BridgeService_ServiceDesc is the grpc.ServiceDesc for BridgeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BridgeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bridge.BridgeService",
	HandlerType: (*BridgeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendBridge",
			Handler:    _BridgeService_SendBridge_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetBridgeStatus",
			Handler:       _BridgeService_GetBridgeStatus_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/bridge_service.proto",
}
